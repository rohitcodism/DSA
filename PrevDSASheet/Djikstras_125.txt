--------------------------Code for Djikstra's Algorithm-------------------------

#include <iostream>

using namespace std;

int INT_MAX = 99999;

int minDistance(int dist[], bool sptSet[], int V) {
    int min = INT_MAX;
    int min_index = -1;

    for (int v = 0; v < V; v++) {
        if (!sptSet[v] && dist[v] <= min) {
            min = dist[v];
            min_index = v;
        }
    }
    return min_index;
}

void printPath(int parent[], int j) {
    if (parent[j] == -1)
        return;

    printPath(parent, parent[j]);

    cout << j << " ";
}

void printSolution(int dist[], int parent[], int V, int src) {
    cout << "Vertex\t Distance\tPath" << endl;
    for (int i = 0; i < V; i++) {
        cout << src << " -> " << i << " \t " << dist[i] << "\t\t" << src << " ";
        printPath(parent, i);
        cout << endl;
    }
}

void dijkstra(int **graph, int src, int V) {
    int dist[V];     
    bool sptSet[V];  
    int parent[V];   // This array is used to store the shortest path tree

    for (int i = 0; i < V; i++) {
        parent[i] = -1;
        dist[i] = INT_MAX;
        sptSet[i] = false;
    }

    dist[src] = 0;

    for (int count = 0; count < V - 1; count++) {
        int u = minDistance(dist, sptSet, V);
        sptSet[u] = true;

        for (int v = 0; v < V; v++) {
            if (!sptSet[v] && graph[u][v] && dist[u] != INT_MAX &&
                dist[u] + graph[u][v] < dist[v]) {
                parent[v] = u;
                dist[v] = dist[u] + graph[u][v];
            }
        }
    }

    printSolution(dist, parent, V, src);
}

int main() {
    int V;
    cout << "Enter number of vertices in graph: ";
    cin >> V;

    int **graph = new int*[V];
    for (int i = 0; i < V; i++) {
        graph[i] = new int[V];
    }

    cout << "Enter the adjacency matrix:\n";
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            cin >> graph[i][j];
        }
    }

    int src;
    cout << "Enter the source vertex: ";
    cin >> src;

    dijkstra(graph, src, V);

    for (int i = 0; i < V; i++) {
        delete[] graph[i];
    }
    delete[] graph;

    return 0;
}







------------------------OUTPUT-------------------

Enter number of vertices in graph: 5
Enter the adjacency matrix:
0 1 99999 4 99999
1 0 1 99999 2
99999 1 0 99999 1
4 99999 99999 0 5
99999 2 1 5 0
Enter the source vertex: 0
Vertex   Distance       Path
0 -> 0   0              0 
0 -> 1   1              0 1 
0 -> 2   2              0 1 2 
0 -> 3   4              0 3 
0 -> 4   3              0 1 4 